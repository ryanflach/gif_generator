exit
Category.favorited_gifs_by_user(admin)
Category.joins(:gifs).includes(admin).group([:name, :id])
admin.joins(:gifs)
admin
Category.favorited_gifs_by_user(admin)
exit
Category.favorited_gifs_by_user(admin)
exit
Category.joins(:gifs).group(:name).count
Category.joins(:gifs).group(:name)
Category.joins(:gifs)
Category.joins(:gifs).includes(admin).group(:name).count
Category.joins(:gifs).includes(admin).group(:name).first
Category.joins(:gifs).includes(admin).group(:name)
Category.first.gifs.includes(admin).group(:name)
Category.first.gifs.includes(admin).count
Category.first.gifs.includes(admin)
Category.favorited_gifs_by_user(admin)
exit
Category.favorited_gifs_by_user(admin)
exit
Category.favorited_gifs_by_user(admin)
exit
Category.favorited_gifs_by_user(admin)
exit
Category.all
Category.count
Category.favorited_gifs_by_user(admin)
create(:category)
Category.count
Category.all.count
Category.all
Category.favorited_gifs_by_user(admin)
exit
Category.favorited_gifs_by_user(admin)
Category.favorited_gifs_by_user
cats = Category.favorited_gifs_by_user(admin)
exit
cat.name
cat.first
cat.all
cat.map
cat.itself
cat.self
cat = Category.first
self
Category.first.favorited_gifs_by_user(admin)
exit
Category.first.all
Category.first.favorited_gifs_by_user(admin)
exit
Category.first.favorited_gifs_by_user(admin)
exit
Category.first.gifs.includes(admin).count
admin
Category.first.gifs.includes(admin).first
Category.first.gifs.includes(admin)
Category.first.gifs.includes(user)
Category.first.gifs.where(:users).include(admin)
Category.first.gifs
Category.first
exit
gifs = Category.all.map { |cat| {"#{cat.name}": cat.gifs.users.where(user: admin) }
Category.all.each do |category|
Category.all
exit
self
exit
params
exit
params
exit
params
exit
gif
exit
data.data.first.images.fixed_width.url
data.data.first.images.fixed_with.url
data.data.first.images
data.data.first
data = parse_data(category)
exit
data['data'].first['images']['fixed_height_small']['url']
data['data'].first['images']['fixed_height_small']
data['data'].first['images'].keys
data['data'].first.keys
data['data'].count
data['data']
data[:data]
data[:data].keys
data.data.count
data.data.keys
data.keys
data = parse_data(category)
exit
data.class
data.values
data.keys
data
data.count
data.data.count
data.data.select { |item| item == 'images' }
pp data
data = parse_data(category)
exit
data.data.images
data.images
data
data = JSON.parse(fetch_data(category).body.data, object_class: OpenStruct)
pp data
data
data.type
data
fetch_data(category).body
data.data.url
data.data.methods
data.results
data.fixed_width_still
data.url
data.data.url
data.data
data = parse_data(category)
data = JSON.parse(fetch_data(category).data, object_class: OpenStruct)
data.url
data = parse_data(category)
category
exit
clean_gif_params
exit
gif_params[:category].empty?
gif_params
exit
gif_params
params
exit
User.last
User.first
current_user
User.all
@user.update(user_params)
user
current_user
exit
current_user
@current_user
current_user.username
other_existing_user
user
exit
create_list(:user, 2)
other_existing_user.username
user.username
exit
current_user
session[:user_id]
exit
session[:user_id]
current_user
exit
session
sessions
session
exit
User.count
exit
User.count
exit
User.count
exit
User.count
exit
User.count
exit
User.count
User.all
user.favorites.count
user.favorites
user
exit
user_params
exit
User.create!(username: user.username, email: 'ryan@example.com', password: 'ryan')
User.count
User.all
exit
User.first
