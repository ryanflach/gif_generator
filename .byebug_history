exit
FavoriteGif.first
FavoriteGif.find_by(user: @user, gif_id: params[:id]).destroy
FavoriteGif.select(user: @user, gif_id: params[:id]).destroy
FavoriteGif.where(user: @user, gif_id: params[:id]).destroy
FavoriteGif.where(user: @user, gif_id: params[:id])
FavoriteGif.where(user: user, gif_id: params[:id])
FavoriteGif.first
FavoriteGif
@user.favorites
@user
params
exit
params
exit
Category.find(1).name
params.require(:gif).permit(:category, :category_id)
params
exit
gifs
category
@user.favorites.grouped_by_category
exit
category
exit
hash
next
hash
next
hash
next
exit
hash
hash[gif.category.name] << gif
hash[gif.category.name]
hash
gif
exit
@user.favorites.grouped_by_category
gifs
category
exit
@user
hash
exit
@user.favorites.grouped_by_category
exit
@user.favorites.grouped_by_category
exit
@user.favorites.grouped_by_category
exit
@user.favorites.grouped_by_category
gifs
category
exit
category
@user.favorites.grouped_by_category.group('categories.name')category
@user.favorites.grouped_by_category.group('categories.name')
@user.favorites.grouped_by_category.count
@user.favorites.grouped_by_category
@user.favorites.grouped_by_category.count
@user.favorites.grouped_by_category
gifs
category
exit
@user.favorites.grouped_by_category
@user.favorites.grouped_by_category.methods
@user.favorites.grouped_by_category.method
@user.favorites.grouped_by_category.all.each do |gif|
@user.favorites.grouped_by_category.all
@user.favorites.grouped_by_category
@user.favorites.count
@user.favorites
@user.favorites << Category.last.gifs.last
user.favorites << Category.last.gifs.last
Category.last.gifs << Gif.create!(image_path: '2.jpg')
@user.favorites.grouped_by_category
@user.favorites
@user.favorites << Category.last.gifs.first
@user.favorites
Category.last.gifs
Category.last.gifs << Gif.last
Gif.create!(image_path: 'new.jpg')
Category.all
Category.create!(name: "new")
gif.category
gif
index
gif.category.name
gif
@user
exit
rspec
gif
@user
exit
@user
exit
Gif.all
Category.first.gifs
Category.first.gifs << Gif.create!(image_path: 'www.example.com/1.jpg')
Category.first.gifs << Gif.create!(image_path: 'www.example.com')
Category.first.gifs
Category.first
user.favorites << Gif.first
Gif.all
Category.first.gifs
Gif.all
Gif.first
Category.first.gifs << Gif.create!(image_path: 'www.example.com')
Category.create!(name: 'action')
Category.gifs << Gif.create!(image_path: 'www.example.com')
Category.all
Gif.first
user.favorites
user = User.first
User.all
admin
@user
current_user
user
exit
Category.favorited_gifs_by_user(admin)
Category.joins(:gifs).includes(admin).group([:name, :id])
admin.joins(:gifs)
admin
Category.favorited_gifs_by_user(admin)
exit
Category.favorited_gifs_by_user(admin)
exit
Category.joins(:gifs).group(:name).count
Category.joins(:gifs).group(:name)
Category.joins(:gifs)
Category.joins(:gifs).includes(admin).group(:name).count
Category.joins(:gifs).includes(admin).group(:name).first
Category.joins(:gifs).includes(admin).group(:name)
Category.first.gifs.includes(admin).group(:name)
Category.first.gifs.includes(admin).count
Category.first.gifs.includes(admin)
Category.favorited_gifs_by_user(admin)
exit
Category.favorited_gifs_by_user(admin)
exit
Category.favorited_gifs_by_user(admin)
exit
Category.favorited_gifs_by_user(admin)
exit
Category.all
Category.count
Category.favorited_gifs_by_user(admin)
create(:category)
Category.count
Category.all.count
Category.all
Category.favorited_gifs_by_user(admin)
exit
Category.favorited_gifs_by_user(admin)
Category.favorited_gifs_by_user
cats = Category.favorited_gifs_by_user(admin)
exit
cat.name
cat.first
cat.all
cat.map
cat.itself
cat.self
cat = Category.first
self
Category.first.favorited_gifs_by_user(admin)
exit
Category.first.all
Category.first.favorited_gifs_by_user(admin)
exit
Category.first.favorited_gifs_by_user(admin)
exit
Category.first.gifs.includes(admin).count
admin
Category.first.gifs.includes(admin).first
Category.first.gifs.includes(admin)
Category.first.gifs.includes(user)
Category.first.gifs.where(:users).include(admin)
Category.first.gifs
Category.first
exit
gifs = Category.all.map { |cat| {"#{cat.name}": cat.gifs.users.where(user: admin) }
Category.all.each do |category|
Category.all
exit
self
exit
params
exit
params
exit
params
exit
gif
exit
data.data.first.images.fixed_width.url
data.data.first.images.fixed_with.url
data.data.first.images
data.data.first
data = parse_data(category)
exit
data['data'].first['images']['fixed_height_small']['url']
data['data'].first['images']['fixed_height_small']
data['data'].first['images'].keys
data['data'].first.keys
data['data'].count
data['data']
data[:data]
data[:data].keys
data.data.count
data.data.keys
data.keys
data = parse_data(category)
exit
data.class
data.values
data.keys
data
data.count
data.data.count
data.data.select { |item| item == 'images' }
pp data
data = parse_data(category)
exit
data.data.images
data.images
data
data = JSON.parse(fetch_data(category).body.data, object_class: OpenStruct)
pp data
data
data.type
data
fetch_data(category).body
data.data.url
data.data.methods
data.results
data.fixed_width_still
data.url
data.data.url
data.data
data = parse_data(category)
data = JSON.parse(fetch_data(category).data, object_class: OpenStruct)
data.url
data = parse_data(category)
category
exit
clean_gif_params
exit
gif_params[:category].empty?
gif_params
exit
gif_params
params
